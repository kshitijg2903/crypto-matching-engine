Implement the following Application "TradingApp" in python. The Code generated should be full featured with end-to-end functionality meeting the following requirements. 
You should implement this using open source services and libraries. Don't use AWS services. This should run in my current linux system ( the current host). Install whatever libraries and applicatins required to build this application in this host so that the application can run on the current host. This host is my cloud host which I am accessing from my Mac laptop using SSH . 

Instrucion: 
You should understand the requirement first, then implement complete code. Store all files generated in current directory and compile. 
After implementation and building the application, you should provide step-by-step guide on how to use this application. 
Objective:
Develop a high-performance cryptocurrency matching engine. This engine should implement core trading functionalities based on REG NMS-inspired principles of price-time priority and internal order protection. Additionally, the engine must generate its own stream of trade execution data.

Core Requirements:

Matching Engine Logic (REG NMS-inspired Principles)
1. BBO Calculation and Dissemination:
    - The matching engine must maintain a real-time Best Bid and Offer (BBO) for each trading pair based on its internal order book.
    - The BBO must be accurately calculated and updated instantaneously as orders are added, modified, canceled, or matched.

2. Internal Order Protection & Price-Time Priority:
    - Implement a strict price-time priority matching algorithm. For a given price level, orders must be filled based on their time of arrival (FIFO).
    - Ensure that orders offering a better price (higher bid, lower offer) are always prioritized.
    - The system must prevent "internal trade-throughs": an incoming marketable order (e.g., market order or a limit order priced to cross the spread) must always be matched at the best available price(s) on the internal order book. If an order can be partially filled at a better price, it must be, before moving to the next price level on the book.

3. Order Type Handling:
    - Support core order types:
        - Market Order: Executes immediately at the best available current price(s).
        - Limit Order: Executes at the specified price or better. Must rest on the book if not immediately marketable.
        - Immediate-Or-Cancel (IOC): Executes all or part of the order immediately at the best available price(s), and cancels any unfilled portion. Must not trade through the internal BBO.
        - Fill-Or-Kill (FOK): Executes the entire order immediately at the best available price(s), or cancels the entire order if it cannot be fully filled. Must not trade through the internal BBO.

Data Generation & API
1. Order Submission API:
    - Implement an API (e.g., REST or WebSocket) to allow users/systems to submit new orders.
    - Input parameters for order submission:
        - symbol (e.g., "BTC-USDT")
        - order_type ("market", "limit", "ioc", "fok")
        - side ("buy", "sell")
        - quantity (decimal)
        - price (decimal, required for limit orders)
2. Market Data Dissemination API:
    - Implement an API (e.g., WebSocket) to stream real-time market data from the engine.
    - This feed should include:
        - Current BBO (Best Bid & Offer).
        - Order book depth (e.g., top 10 levels of bids and asks).
    - Sample L2 Order Book Update (for client consumption):
        {
          "timestamp": "YYYY-MM-DDTHH:MM:SS.ssssssZ",
          "symbol": "BTC-USDT",
          "asks": [ /* Array of ["price_level", "quantity_at_price_level"] */ ],
          "bids": [ /* Array of ["price_level", "quantity_at_price_level"] */ ]
        }
3. Trade Execution Data Generation & API:
    - The matching engine must generate a data stream of its own trade executions (fills) as they occur.
    - Implement an API (e.g., WebSocket) for clients to subscribe to this trade feed.
    - Sample Trade Execution Report:
        {
          "timestamp": "YYYY-MM-DDTHH:MM:SS.ssssssZ",
          "symbol": "BTC-USDT",
          "trade_id": "unique_trade_identifier",
          "price": "execution_price",
          "quantity": "executed_quantity",
          "aggressor_side": "buy/sell", // The side of the incoming order that initiated the trade
          "maker_order_id": "id_of_the_resting_order",
          "taker_order_id": "id_of_the_incoming_order"
        }

Technical Requirements: Implement the above application that meets the following requirements 

2. The system must be designed for high performance, capable of processing a significant volume of orders per second (specify target if desired, e.g., >1000 orders/sec).
3. Robust error handling (e.g., for invalid order parameters, insufficient funds if applicable).
4. Comprehensive logging for diagnostics and audit trails.
5. Clean, maintainable, and well-documented code architecture.
6. Unit tests for core matching logic and order handling.


Documentation Requirements
1. Detailed explanation of:
    - System architecture and design choices.
    - Data structures used for the order book and their rationale.
    - Matching algorithm implementation details.
    - API specifications.
    - Trade-off decisions made during development.

Bonus Section (Recommended)
1. Advanced Order Types: Implement additional order types like Stop-Loss, Stop-Limit, Take-Profit.
2. Persistence: Implement persistence for the order book state, allowing recovery from a restart.
3. Concurrency & Performance Optimization:
    - Detailed benchmarking of order processing latency, BBO update latency, and trade data generation latency.
    - Identify and implement optimizations for critical code paths, data structures, and concurrency management.
4. Basic Fee Model: Implement a simple maker-taker fee model and include fee calculations in trade execution reports.